generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma doesn't allow enum values to start with a number
enum ModelYear {
  MY_2019 @map("2019")
  MY_2020 @map("2020")
  MY_2021 @map("2021")
  MY_2022 @map("2022")
  MY_2023 @map("2023")
  MY_2024 @map("2024")
  MY_2025 @map("2025")
  MY_2026 @map("2026")
  MY_2027 @map("2027")
  MY_2028 @map("2028")
  MY_2029 @map("2029")
  MY_2030 @map("2030")
  MY_2031 @map("2031")
  MY_2032 @map("2032")
  MY_2033 @map("2033")
  MY_2034 @map("2034")
  MY_2035 @map("2035")
}

model Organization {
  id                    Int                    @id @default(autoincrement())
  name                  String
  isGovernment          Boolean                @default(false) @map("is_government")
  firstModelYear        ModelYear              @map("first_model_year")
  users                 User[]
  zevUnitTransactions   ZevUnitTransaction[]
  zevUnitEndingBalances ZevUnitEndingBalance[]
  zevUnitTransferTo     ZevUnitTransfer[]      @relation("zevUnitTransferTo")
  zevUnitTransferFrom   ZevUnitTransfer[]      @relation("zevUnitTransferFrom")

  @@map("organization")
}

enum Role {
  ADMINISTRATOR              @map("Administrator")
  DIRECTOR                   @map("Director")
  ENGINEER_ANALYST           @map("Engineer/Analyst")
  ORGANIZATION_ADMINISTRATOR @map("Organization Administrator")
  SIGNING_AUTHORITY          @map("Signing Authority")
  ZEVA_USER                  @map("ZEVA User")
}

enum Idp {
  BCEID_BUSINESS @map("bceidbusiness")
  IDIR           @map("idir")
}

model User {
  id                     Int                      @id @default(autoincrement())
  contactEmail           String?                  @map("contact_email")
  idpEmail               String                   @map("idp_email")
  idpSub                 String?                  @map("idp_sub")
  idp                    Idp                      @map("idp")
  idpUsername            String                   @map("idp_username")
  isActive               Boolean                  @default(true) @map("is_active")
  organization           Organization             @relation(fields: [organizationId], references: [id])
  organizationId         Int                      @map("organization_id")
  roles                  Role[]
  zevUnitTransferHistory ZevUnitTransferHistory[]
  ZevUnitTransferComment ZevUnitTransferComment[]

  @@unique([idp, idpUsername, idpEmail])
  @@map("user")
}

enum TransactionType {
  CREDIT
  DEBIT
  TRANSFER_AWAY
}

enum ReferenceType {
  TRANSFER
  PENALTY_CREDITS
  OBLIGATION_REDUCTION
  ASSESSMENT_ADJUSTMENT
  SUPPLY_CREDITS
  AGREEMENT_CREDITS
}

enum ZevClass {
  A
  B
  C
  UNSPECIFIED
}

enum VehicleClass {
  REPORTABLE
}

model ZevUnitTransaction {
  id             Int             @id @default(autoincrement())
  organization   Organization    @relation(fields: [organizationId], references: [id])
  organizationId Int             @map("organization_id")
  type           TransactionType
  // referenceType and referenceId nullable for now; make non-nullable later when
  // associated models (e.g. agreements, transfers, etc.) created
  referenceType  ReferenceType?  @map("reference_type")
  referenceId    Int?            @map("reference_id")
  numberOfUnits  Decimal         @map("number_of_units") @db.Decimal(65, 2)
  zevClass       ZevClass        @map("zev_class")
  vehicleClass   VehicleClass    @map("vehicle_class")
  modelYear      ModelYear       @map("model_year")
  timestamp      DateTime        @db.Timestamptz(6)

  @@map("zev_unit_transaction")
}

enum BalanceType {
  CREDIT
  DEBIT
}

model ZevUnitEndingBalance {
  id                   Int          @id @default(autoincrement())
  organization         Organization @relation(fields: [organizationId], references: [id])
  organizationId       Int          @map("organization_id")
  complianceYear       ModelYear    @map("compliance_year")
  type                 BalanceType
  initialNumberOfUnits Decimal      @map("initial_number_of_units") @db.Decimal(65, 2)
  finalNumberOfUnits   Decimal      @map("final_number_of_units") @db.Decimal(65, 2)
  zevClass             ZevClass     @map("zev_class")
  vehicleClass         VehicleClass @map("vehicle_class")
  modelYear            ModelYear    @map("model_year")

  @@unique([organizationId, complianceYear, zevClass, vehicleClass, modelYear])
  @@map("zev_unit_ending_balance")
}

enum ZevUnitTransferStatuses {
  DRAFT
  SUBMITTED_TO_TRANSFER_TO
  RESCINDED_BY_TRANSFER_FROM
  APPROVED_BY_TRANSFER_TO
  REJECTED_BY_TRANSFER_TO
  RECOMMEND_APPROVAL_GOV
  RECOMMEND_REJECTION_GOV
  APPROVED_BY_GOV
  REJECTED_BY_GOV
  DELETED
}

model ZevUnitTransfer {
  id                     Int                      @id @default(autoincrement())
  // we display ids to the user, so they may expect to see the same ids from zeva1
  legacyId               Int?                     @unique @map("legacy_id")
  transferToId           Int                      @map("transfer_to_id")
  transferTo             Organization             @relation("zevUnitTransferTo", fields: [transferToId], references: [id])
  transferFromId         Int                      @map("transfer_from_id")
  transferFrom           Organization             @relation("zevUnitTransferFrom", fields: [transferFromId], references: [id])
  status                 ZevUnitTransferStatuses
  zevUnitTransferContent ZevUnitTransferContent[]
  ZevUnitTransferHistory ZevUnitTransferHistory[]
  ZevUnitTransferComment ZevUnitTransferComment[]

  @@map("zev_unit_transfer")
}

model ZevUnitTransferContent {
  id                 Int             @id @default(autoincrement())
  zevUnitTransferId  Int             @map("zev_unit_transfer_id")
  zevUnitTransfer    ZevUnitTransfer @relation(fields: [zevUnitTransferId], references: [id])
  numberOfUnits      Decimal         @map("number_of_units") @db.Decimal(65, 2)
  zevClass           ZevClass        @map("zev_class")
  vehicleClass       VehicleClass    @map("vehicle_class")
  modelYear          ModelYear       @map("model_year")
  dollarValuePerUnit Decimal         @map("dollar_value_per_unit") @db.Decimal(65, 2)

  @@map("zev_unit_transfer_content")
}

enum ZevUnitTransferHistoryStatuses {
  SUBMITTED_TO_TRANSFER_TO
  RESCINDED_BY_TRANSFER_FROM
  APPROVED_BY_TRANSFER_TO
  REJECTED_BY_TRANSFER_TO
  RECOMMEND_APPROVAL_GOV
  RECOMMEND_REJECTION_GOV
  APPROVED_BY_GOV
  REJECTED_BY_GOV
}

model ZevUnitTransferHistory {
  id                    Int                            @id @default(autoincrement())
  zevUnitTransferId     Int                            @map("zev_unit_transfer_id")
  zevUnitTransfer       ZevUnitTransfer                @relation(fields: [zevUnitTransferId], references: [id])
  userId                Int                            @map("user_id")
  user                  User                           @relation(fields: [userId], references: [id])
  timestamp             DateTime                       @db.Timestamptz(6)
  afterUserActionStatus ZevUnitTransferHistoryStatuses @map("after_user_action_status")

  @@unique([zevUnitTransferId, afterUserActionStatus])
  @@map("zev_unit_transfer_history")
}

enum ZevUnitTransferCommentType {
  TO_COUNTERPARTY_UPON_RESCIND
  INTERNAL_GOV
}

model ZevUnitTransferComment {
  id                Int                        @id @default(autoincrement())
  zevUnitTransferId Int                        @map("zev_unit_transfer_id")
  zevUnitTransfer   ZevUnitTransfer            @relation(fields: [zevUnitTransferId], references: [id])
  userId            Int                        @map("user_id")
  user              User                       @relation(fields: [userId], references: [id])
  createTimestamp   DateTime                   @default(now()) @map("create_timestamp") @db.Timestamptz(6)
  updateTimestamp   DateTime                   @updatedAt @map("update_timestamp") @db.Timestamptz(6)
  comment           String
  commentType       ZevUnitTransferCommentType @map("comment_type")

  @@map("zev_unit_transfer_comment")
}
